services:
  # Production services (default profile)
  fastflight-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    ports:
      - "8815:8815"
    command: [ "start-flight-server", "--flight-location", "grpc://0.0.0.0:8815" ]
    healthcheck:
      test: [ "CMD", "python", "-c", "import fastflight; print('OK')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  fastapi-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    ports:
      - "8000:8000"
    command: [
      "start-rest-server",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--flight-location", "grpc://fastflight-server:8815"
    ]
    depends_on:
      fastflight-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/fastflight/registered_data_types')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development setup with both servers in one container
  fastflight-dev-servers:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    ports:
      - "8000:8000"
      - "8815:8815"
    command: [ "start-all" ]
    profiles: [ "dev" ]

  # Interactive development container
  fastflight-dev-shell:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    volumes:
      - .:/app
    working_dir: /app
    stdin_open: true
    tty: true
    profiles: [ "dev" ]
    command: [ "/bin/bash" ]
