name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # Fast checks that run first
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      python-versions: ${{ steps.python-versions.outputs.versions }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Determine Python versions to test
        id: python-versions
        run: |
          echo "versions=[\"3.10\", \"3.11\", \"3.12\", \"3.13\"]" >> $GITHUB_OUTPUT

      - name: Lint with Ruff
        run: uv run ruff check --output-format=github .

      - name: Format check with Ruff
        run: uv run ruff format --check .

      - name: Type check with MyPy
        run: uv run mypy src/ --ignore-missing-imports

      - name: Security check
        run: |
          uv add --dev bandit[toml] safety
          uv run bandit -r src/ -f json
          uv run safety check --json

  # Core testing matrix
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: pre-checks
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: ${{ fromJson(needs.pre-checks.outputs.python-versions) }}
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests with coverage
        run: |
          uv run pytest \
          --cov=fastflight \
          --cov-report=xml \
          --cov-report=term \
          --cov-fail-under=50 \
          --junit-xml=pytest.xml \
          -v

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Arrow Flight specific tests
  integration-tests:
    name: Arrow Flight Integration Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    timeout-minutes: 20
    services:
      # We might need a test database or other services
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Start Flight server for testing
        run: |
          # Start FastFlight server in background
          uv run python -m fastflight.cli flight-server --port 8001 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to be ready
          sleep 5
          
          # Test if server is responding
          curl -f http://localhost:8001/health || exit 1

      - name: Run integration tests
        run: |
          uv run pytest tests/integration/ -v --tb=short
        env:
          FLIGHT_SERVER_URL: "grpc://localhost:8001"
          POSTGRES_URL: "postgresql://postgres:postgres@localhost:5432/testdb"

      - name: Stop Flight server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: pre-checks
    if: github.event_name == 'pull_request'
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Install benchmark dependencies
        run: |
          uv add --dev pytest-benchmark asv

      - name: Run benchmarks
        run: |
          uv run pytest tests/benchmarks/ --benchmark-json=benchmark.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: true

  # Build and validate package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [ pre-checks, test ]
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Build package
        run: uv build

      - name: Verify package
        run: |
          uv run twine check dist/*
          
          # Test installation in fresh environment
          uv venv test-env
          source test-env/bin/activate
          pip install dist/*.whl
          python -c "import fastflight; print(f'FastFlight version: {fastflight.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

  # Documentation checks
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: pre-checks
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv add --dev mkdocs mkdocs-material mkdocstrings[python]

      - name: Build documentation
        run: |
          uv run mkdocs build --strict

      - name: Upload docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: site/

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [ pre-checks, test, integration-tests, build, docs ]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.pre-checks.result }}" != "success" ]]; then
            echo "Pre-checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          if [[ "${{ needs.docs.result }}" != "success" ]]; then
            echo "Documentation build failed"
            exit 1
          fi
          echo "All checks passed!"
