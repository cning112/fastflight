[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fastflight"
authors = [{ name = "Chao Ning", email = "chao.ning.uk@gmail.com" }]
description = "FastFlight is a high-performance data transfer framework that integrates Apache Arrow Flight to fetch and stream large-scale data from multiple sources, using a modular, pluggable architecture for various data services, and offers optional FastAPI integration for HTTP-based access."
version = "0.4.0"
readme = "README.md"
requires-python = ">= 3.10"
dependencies = [
    "pandas",
    "pyarrow>=14.0.0",
    "pydantic>=2.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
cli = [
    "typer>=0.15.2"
]
duckdb = [
    "duckdb"
]
fastapi = [
    "fastapi[standard]"
]
structlog = [
    "structlog"
]
examples = [
    "matplotlib>=3.10.1",
    "seaborn>=0.13.2",
    "httpx",
    "rich",
    "sqlalchemy>=2.0.38"
]
all = [
    "typer>=0.15.2",
    "duckdb",
    "fastapi[standard]",
    "structlog",
    "matplotlib>=3.10.1",
    "seaborn>=0.13.2",
    "httpx",
    "rich",
    "sqlalchemy>=2.0.38"
]

[project.scripts]
fastflight = "fastflight.cli:cli"

[dependency-groups]
dev = [
    "mypy",
    "pandas-stubs>=2.2.3.241126",
    "pre-commit",
    "pyarrow-stubs>=17.17",
    "pytest",
    "pytest-asyncio>=0.25.3",
    "pytest-cov",
    "ruff",
]

[tool.ruff]
target-version = "py310"
line-length = 120
src = ["src", "tests", "examples"]

[tool.ruff.format]
skip-magic-trailing-comma = true
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
# Unified linting configuration for consistency across pre-commit and CI
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # Pyflakes
    "I", # isort
    "B", # flake8-bugbear (catches common bugs)
    "C4", # flake8-comprehensions (performance)
    "UP", # pyupgrade (modernize syntax)
    "SIM", # flake8-simplify (code simplification)
    "RUF", # Ruff-specific rules
    "T20", # flake8-print (detect print statements)
]

ignore = [
    # Allow TODO comments during development
    "FIX002",
    # Allow function calls in argument defaults (common in FastAPI/Pydantic)
    "B008", # Do not perform function calls in argument defaults
]

# Auto-fix safe rules
fixable = ["E", "W", "F", "I", "B", "C4", "UP", "SIM", "RUF"]
unfixable = []

[tool.ruff.lint.isort]
split-on-trailing-comma = false
force-single-line = false
known-first-party = ["fastflight"]

[tool.ruff.lint.per-file-ignores]
# Tests can be more relaxed
"tests/**/*" = [
    "B011", # Allow assert False
    "T201", # Allow print statements in tests
    "T203", # Allow pprint in tests
]
# Examples can use print statements and be more flexible  
"examples/**/*" = [
    "T201", # Allow print statements
    "T203", # Allow pprint
    "B008", # Allow function calls in defaults (demo code)
]
# CLI modules can use print
"src/fastflight/cli.py" = [
    "T201", # Allow print statements in CLI
    "T203", # Allow pprint in CLI
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
show_error_codes = true
pretty = true
# Check all project code consistently across pre-commit and CI
files = ["src", "tests", "examples"]

# Enable strict optional checking
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
# Tests can be more relaxed
ignore_errors = false
disable_error_code = ["import-untyped"]

[[tool.mypy.overrides]]
module = "examples.*"
# Examples can be more relaxed
ignore_errors = false
disable_error_code = ["import-untyped"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
    "--cov=fastflight",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-report=html",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
